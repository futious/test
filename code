#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 28 12:40:48 2022

@author: koreynishimoto
"""

import pandas as pd
import plotly.express as px

from dataprep.clean import clean_phone,validate_phone

import re

import dash
from dash import dcc

from dash import html
from dash.dependencies import Input, Output
import dash_table


import dash_bootstrap_components as dbc

app = dash.Dash(__name__)

app = dash.Dash(
                external_stylesheets=[dbc.themes.BOOTSTRAP],
                suppress_callback_exceptions=True,
      )

app.title = 'Takehome Test'



#############################################################
## Scrub Data##


pd.options.display.max_columns=200

df = pd.read_csv('/Users/koreynishimoto/Desktop/Takehome/'
                   +'takehomedata.csv', index_col=False)

#df = df.fillna('None')


############################################################
##Clean Phone number##

df['phone'] = df['phone'].str.replace(')',') ')

#some phone numbers have 9 characters. This is possiblle due to a leading
#0 which the computer deleted. ex: 04 = 4
df['phone']=df['phone'].str.zfill(10)
df['work phone']=df['work phone'].str.zfill(10)


#clean numbers
df=clean_phone(df, "phone", output_format="national")
df=clean_phone(df, "work phone", output_format="national")

sixth_column = df.pop('phone_clean')
fourteenth_column = df.pop('work phone_clean')
df.insert(6, 'Phone clean', sixth_column)
df.insert(14, 'Work phone clean', fourteenth_column)


df["valid phone"] = validate_phone(df["phone"])

df["Phone clean"].fillna(df["phone"], inplace=True)
df["Work phone clean"].fillna(df["work phone"], inplace=True)

seventh_column = df.pop('valid phone')
df.insert(7, 'Valid phone', seventh_column)




#Showed no duplicate rows
df.drop_duplicates(keep = False, inplace = True)



'''
#Checking for duplicates of important information

#Showed 723 duplicated names. This includes NA
df.drop_duplicates(subset ="name",keep = False, inplace = True)


#No shared emails with shared name
dupname = df[df.duplicated(subset='name',keep=False)]
dupname = dupname[dupname.duplicated(subset='email',keep=False)]

#No shared Phone numbers with shared name. This includes NA
dupname = dupname[dupname.duplicated(subset='phone',keep=False)]

dupname = dupname.sort_values('name')


#Showed 436 duplicate emails. Important when advertising since
#only one person may get the advertisement.

dupemail = df[df.duplicated(subset='email',keep=False)]

# Showed there are 25 duplicated phone numbers. No overlap with missing emails. 
dupephone = df[df.duplicated(subset='phone',keep=False)]

#no duplicated work email but missing 30. May be better to send emails this way.
dupework = df[df.duplicated(subset='work email',keep=False)]


#no duplicate work phone numbers but missing 31. Call this way.
dupeworkp = df[df.duplicated(subset='work phone',keep=False)]
print(len(dupephone))


#691 duplicate work
dupework = df[df.duplicated(subset='work',keep=False)]
dupework = dupework.sort_values('work')
print(dupework)

dupework['work'].value_counts()

dupework.loc[dupework['work']=='Smith and Sons']['work state'].value_counts()
'''


df['city'].value_counts()

#Split first and last Name

df[['First Name','Last Name']]=df.name.str.split(expand=True)


second_column = df.pop('First Name')
third_column = df.pop('Last Name')
df.insert(1, 'First Name', second_column)
df.insert(2, 'Last Name', third_column)

#Finding rows with no name.
emptyname = df[df["name"].isnull()][df.columns[df.isnull().any()]]
print('There are ' + str(len(emptyname)) + ' rows with no name. These rows can be found with the indexs' 
      + str(list(emptyname.index.values)))




#split date from time
df[['Date']] = df['account created on'].str.split(expand=True)[0]


df['Year created'] = df['Date'].str.replace('.*(?<=/)', '', regex=True)


accountcount = df['Year created'].value_counts(dropna=False).reset_index(drop=False)

accountcount.columns=['Year created', 'Count']
accountcount=accountcount.sort_values(by='Year created')



#split email to account and server name
df[['Email Name','Server']]=df['email'].str.split('@',expand=True)

emailcount=df['Server'].value_counts(dropna=False)

#df[df['Date'].str.contains('2/29',na=False)]







#Choropleth Map

code = {'Alabama': 'AL',
        'Alaska': 'AK',
        'Arizona': 'AZ',
        'Arkansas': 'AR',
        'California': 'CA',
        'Colorado': 'CO',
        'Connecticut': 'CT',
        'Delaware': 'DE',
        'District of Columbia': 'DC',
        'Florida': 'FL',
        'Georgia': 'GA',
        'Hawaii': 'HI',
        'Idaho': 'ID',
        'Illinois': 'IL',
        'Indiana': 'IN',
        'Iowa': 'IA',
        'Kansas': 'KS',
        'Kentucky': 'KY',
        'Louisiana': 'LA',
        'Maine': 'ME',
        'Maryland': 'MD',
        'Massachusetts': 'MA',
        'Michigan': 'MI',
        'Minnesota': 'MN',
        'Mississippi': 'MS',
        'Missouri': 'MO',
        'Montana': 'MT',
        'Nebraska': 'NE',
        'Nevada': 'NV',
        'New Hampshire': 'NH',
        'New Jersey': 'NJ',
        'New Mexico': 'NM',
        'New York': 'NY',
        'North Carolina': 'NC',
        'North Dakota': 'ND',
        'Ohio': 'OH',
        'Oklahoma': 'OK',
        'Oregon': 'OR',
        'Pennsylvania': 'PA',
        'Rhode Island': 'RI',
        'South Carolina': 'SC',
        'South Dakota': 'SD',
        'Tennessee': 'TN',
        'Texas': 'TX',
        'Utah': 'UT',
        'Vermont': 'VT',
        'Virginia': 'VA',
        'Washington': 'WA',
        'West Virginia': 'WV',
        'Wisconsin': 'WI',
        'Wyoming': 'WY'}

df['Code'] = df['state'].map(code)

df=df.join(df['Code'].value_counts(), on='Code', lsuffix='', rsuffix =' Count')



mapfig = px.choropleth(data_frame = df, 
                    locations = 'Code',
                    locationmode = 'USA-states',
                    color = 'Code Count',
                    #color_continuous_scale=px.colors.sequential.Plotly3,
                    hover_name = "state",  
                    height = 800,
                    range_color = (150,230),
                    scope='usa'
                    )



## Line chart for accounts created over the years
df=df.join(df['Year created'].value_counts(), on='Year created', lsuffix='', rsuffix =' count')

accounts = px.line(
             data_frame = accountcount,
             x = 'Year created',
             y = 'Count', 
             )



## bar graph for most accounts opened per city


city_account_count = df['city'].value_counts(dropna=False).reset_index(drop=False)

city_account_count.columns=['City', 'Count']


top_cities = px.bar(data_frame = city_account_count,
             x = 'City',
             y = 'Count',
             orientation = 'h'            
             )














#############################################################################

colors = {"background": "#011833", "text": "#7FDBFF"}


# the style arguments for the sidebar. We use position:fixed and a fixed width
SIDEBAR_STYLE = {
    "position": "fixed",
    "top": 0,
    "left": 0,
    "bottom": 0,
    "width": "16rem",
    "padding": "2rem 1rem",
    "background-color": "#022248",
    "text": "#7FDBFF",
    
}

# the styles for the main content position it to the right of the sidebar and
# add some padding.
CONTENT_STYLE = {
    "margin-left": "18rem",
    "margin-right": "2rem",
    "padding": "1rem 1rem",
    "background-color": "#022248",
    "text": "#7FDBFF",
    'borderWidth':0,
   
}




sidebar = html.Div(
    [
        html.H2("Online Sales", className="display-4"),
        html.Hr(),
        html.P(
            "Pick a category you would like displayed", className="lead"
        ),
        dbc.Nav(
            [
                dbc.NavLink("Home", href="/", active="exact"),
                dbc.NavLink("Account Information", href="/Account-Information", active="exact"),
            ],
            vertical=True,
            pills=True,
        ),
        
        
    ],
    style=SIDEBAR_STYLE,
)

content = html.Div(id="page-content", style=CONTENT_STYLE)


app.layout = html.Div([dcc.Location(id="url"), sidebar, content],
                      style={'backgroundColor': colors['background'],
                             'color': colors['text'],
                             
                             },)




@app.callback(Output("page-content", "children"),
              [Input("url", "pathname")])


def render_page_content(pathname):
    if pathname == "/":
        return [ 
            html.H1('Online Sales and Distribution'),
            
         
            
            html.Div('This dashboard will be used to show visual representations of data. Below is the pertinent information.'
                     +' For a more detailed visual representation use the side bar to navigate.',
                   ),
                
            
            
            
            dbc.Row([
            
                dbc.Col(
                    
                    dbc.CardImg(src=app.get_asset_url('img1.jpg'),
                    style={'height':'6cm'}),
                    
                    ),
                
                dbc.Col(
                    dbc.Card(
                            dbc.CardBody(
                                [  
                                    html.H5("Introduction to Dashboards", className="card-title"),
                                    html.P(
                                        "This is a dashboard which features a sidebar, cards, images, tables, and interactive visuals to represent data."
                                        " The intent of this dashboard is to demonstrate the many different features found in Dash."
                                        ),
                                    dbc.Button("Korey's Website", size="lg", id= 'Button-1', color="primary",href="https://koreyandmath.wordpress.com"),
                                    ]
                                ),
                            style={'backgroundColor': "#011833",'height':'6cm'},
                          ),
                  width=8
                  )
                
                    ],
                ),
            
            html.Div('The table below is a summary of important information. This information can also be found using the tabls to the left. '
                   ),
                
            ]    
     


####################################################################
##Dashboar Layout.

    
    elif pathname == "/Account Information":
        
        return [
            html.Div([
            html.H1(children='Hello Dash'),

            html.Div(children='Take home'),
    
            dcc.Graph(
                id='Map',
                figure=mapfig
                ),
    
            dash_table.DataTable(
                    id='table',
                    columns=[
                        {'name': 'Emails',
                         'id': 'column1'
                         },
                        {'name': 'Count',
                         'id': 'column2'
                         },
                        
                        ],
                    data=[
                        {'column1': 'yahoo.com','column2': emailcount.iloc[[0]].iloc[0] },
                        {'column1': 'gmail.com' ,'column2': emailcount.iloc[[1]].iloc[0]},
                        {'column1': 'hotmail.com' ,'column2': emailcount.iloc[[2]].iloc[0]},
                        {'column1': 'NA' ,'column2': emailcount.iloc[[3]].iloc[0]},
                       
                      
                    ],
                    
                    page_action='none',
                    fixed_rows={'headers': True},
                    style_table={'height': '200px', 'overflowY': 'auto'},
                    style_header={'backgroundColor': 'rgb(30, 30, 30)','color': 'white'},
                    style_data={'backgroundColor': 'rgb(50, 50, 50)','color': 'white'},
            ),
     
            dcc.Graph(
                id = 'example-graph0',
                figure = accounts,
                ),
                
   
    
             html.Div([ 
        
                html.Div([
                        html.Label("Top Cities Opening Accounts"),
                        dcc.Dropdown(
                            id = 'top',
                            options = [{'label': y, 'value': y }
                                       for y in list(range(1,50))
                                       ],
                            value =  5,
                            className = "dropdown",
                            ),
                        ]   
                    ),
   
                html.Div([
                dcc.Graph(
                id = 'horizontal-bar',
                figure = top_cities,
                ),

                    ]), 

            ]),
     ]),
    
                

]
    
@app.callback(
        Output(component_id='horizontal-bar', component_property='figure'),
        Input(component_id='top', component_property='value'), 
)
        
def update_hgraph(top): 
  
    

    dff3 = city_account_count.sort_values('Count',ascending=False)[:top].sort_values('Count',ascending=True)
    dff3 = dff3.fillna("No City Listed")
    
    hlinechart = px.bar(
        data_frame=dff3,
        x = 'Count',
        y = 'City',
        orientation = 'h'
        )

            

    hlinechart.update_layout(
        plot_bgcolor=colors["background"],
        paper_bgcolor=colors["background"],
        font_color=colors["text"],
     )
    


    return hlinechart






if __name__ == '__main__':
        app.run_server(host = '127.0.0.1', debug=True, port = 8060)                  
    



df.to_csv('/Users/koreynishimoto/Desktop/Takehome/newtakehome.csv')



