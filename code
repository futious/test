#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 28 12:40:48 2022

@author: koreynishimoto
"""

import pandas as pd
import numpy as np
import datetime as dt
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime
import plotly.express as px

from dataprep.clean import clean_phone


import dash
from dash import dcc

from dash import html
from dash.dependencies import Input, Output
import dash_table

app = dash.Dash(__name__)





#############################################################
## Scrub Data##


pd.options.display.max_columns=200

df = pd.read_csv('/Users/koreynishimoto/Desktop/Takehome/'
                   +'takehomedata.csv', index_col=False)

#df = df.fillna('None')


############################################################
##Clean Phone number##






#Showed no duplicate rows
df.drop_duplicates(keep = False, inplace = True)




#Checking for duplicates of important information
'''
#Showed 723 duplicated names
df.drop_duplicates(subset ="name",keep = False, inplace = True)


#No shared emails with shared name
dupname = df[df.duplicated(subset='name',keep=False)]
dupname = dupname[dupname.duplicated(subset='email',keep=False)]

#No shared Phone numbers with shared name
dupname = dupname[dupname.duplicated(subset='phone',keep=False)]

dupname = dupname.sort_values('name')
'''

#Showed 436 duplicate emails. Important when advertising since
#only one person may get the advertisement.

dupemail = df[df.duplicated(subset='email',keep=False)]

dupephone = df[df.duplicated(subset='phone',keep=False)]


print(dupephone)


#Split first and last Name

df[['First Name','Last Name']]=df.name.str.split(expand=True)


first_column = df.pop('First Name')
second_column = df.pop('Last Name')
df.insert(0, 'First Name', first_column)
df.insert(1, 'Last Name', second_column)

#Finding rows with no name.
emptyname = df[df["name"].isnull()][df.columns[df.isnull().any()]]
print('There are ' + str(len(emptyname)) + ' rows with no name. These rows can be found with the indexs' 
      + str(list(emptyname.index.values)))




#split date from time
df[['Date']]=df['account created on'].str.split(expand=True)[0]



#split email to account and server name
df[['Email Name','Server']]=df['email'].str.split('@',expand=True)

emailcount=df['Server'].value_counts(dropna=False)

#df[df['Date'].str.contains('2/29',na=False)]







#Choropleth Map

code = {'Alabama': 'AL',
        'Alaska': 'AK',
        'Arizona': 'AZ',
        'Arkansas': 'AR',
        'California': 'CA',
        'Colorado': 'CO',
        'Connecticut': 'CT',
        'Delaware': 'DE',
        'District of Columbia': 'DC',
        'Florida': 'FL',
        'Georgia': 'GA',
        'Hawaii': 'HI',
        'Idaho': 'ID',
        'Illinois': 'IL',
        'Indiana': 'IN',
        'Iowa': 'IA',
        'Kansas': 'KS',
        'Kentucky': 'KY',
        'Louisiana': 'LA',
        'Maine': 'ME',
        'Maryland': 'MD',
        'Massachusetts': 'MA',
        'Michigan': 'MI',
        'Minnesota': 'MN',
        'Mississippi': 'MS',
        'Missouri': 'MO',
        'Montana': 'MT',
        'Nebraska': 'NE',
        'Nevada': 'NV',
        'New Hampshire': 'NH',
        'New Jersey': 'NJ',
        'New Mexico': 'NM',
        'New York': 'NY',
        'North Carolina': 'NC',
        'North Dakota': 'ND',
        'Ohio': 'OH',
        'Oklahoma': 'OK',
        'Oregon': 'OR',
        'Pennsylvania': 'PA',
        'Rhode Island': 'RI',
        'South Carolina': 'SC',
        'South Dakota': 'SD',
        'Tennessee': 'TN',
        'Texas': 'TX',
        'Utah': 'UT',
        'Vermont': 'VT',
        'Virginia': 'VA',
        'Washington': 'WA',
        'West Virginia': 'WV',
        'Wisconsin': 'WI',
        'Wyoming': 'WY'}

df['Code'] = df['state'].map(code)

df=df.join(df['Code'].value_counts(), on='Code', lsuffix='', rsuffix =' Count')



mapfig = px.choropleth(data_frame = df, 
                    locations = 'Code',
                    locationmode = 'USA-states',
                    color = 'Code Count',
                    #color_continuous_scale=px.colors.sequential.Plotly3,
                    hover_name = "state",  
                    height = 800,
                    range_color = (150,230),
                    scope='usa'
                    )





















'''
####################################################################
##Dashboar Layout.
app.layout = html.Div([
    html.H1(children='Hello Dash'),

    html.Div(children='Take home'),
    
    dcc.Graph(
        id='Map',
        figure=mapfig
    ),
    
    dash_table.DataTable(
                    id='table',
                    columns=[
                        {'name': 'Emails',
                         'id': 'column1'
                         },
                        {'name': 'Count',
                         'id': 'column2'
                         },
                        
                        ],
                    data=[
                        {'column1': 'yahoo.com','column2': emailcount.iloc[[0]].iloc[0] },
                        {'column1': 'gmail.com' ,'column2': emailcount.iloc[[1]].iloc[0]},
                        {'column1': 'hotmail.com' ,'column2': emailcount.iloc[[2]].iloc[0]},
                        {'column1': 'NA' ,'column2': emailcount.iloc[[3]].iloc[0]},
                       
                      
                    ],
                    
                    page_action='none',
                    fixed_rows={'headers': True},
                    style_table={'height': '200px', 'overflowY': 'auto'},
                    style_header={'backgroundColor': 'rgb(30, 30, 30)','color': 'white'},
                    style_data={'backgroundColor': 'rgb(50, 50, 50)','color': 'white'},
            ),
    
    
    
    ])










if __name__ == '__main__':
        app.run_server(host = '127.0.0.1', debug=True, port = 8060)                  
    

'''

df.to_csv('/Users/koreynishimoto/Desktop/Takehome/newtakehome.csv')
dupname.to_csv('/Users/koreynishimoto/Desktop/Takehome/dupname.csv')
